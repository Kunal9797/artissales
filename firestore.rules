rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ========================================================================
    // HELPER FUNCTIONS
    // ========================================================================

    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Get current user's role from users collection
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // Check if user is a sales rep
    function isRep() {
      return isAuthenticated() && getUserRole() == 'rep';
    }

    // Check if user is a manager (any level)
    function isManager() {
      return isAuthenticated() && getUserRole() in ['area_manager', 'zonal_head', 'national_head', 'admin'];
    }

    // Check if user is admin
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }

    // Check if this is the user's own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // ========================================================================
    // USERS COLLECTION
    // ========================================================================
    match /users/{userId} {
      // Anyone authenticated can read user data
      allow read: if isAuthenticated();

      // Users can update their own profile
      // Managers and admins can update any user
      allow update: if isOwner(userId) || isManager();

      // Users can create their own document on first login
      // Admins can create any user
      allow create: if isOwner(userId) || isAdmin();

      // Only admins can delete users
      allow delete: if isAdmin();
    }

    // Check if user is national head or admin
    function isNationalHeadOrAdmin() {
      return isAuthenticated() && getUserRole() in ['national_head', 'admin'];
    }

    // ========================================================================
    // ACCOUNTS COLLECTION (Distributors, Dealers, Architects & Contractors)
    // ========================================================================
    match /accounts/{accountId} {
      // Anyone authenticated can read accounts
      allow read: if isAuthenticated();

      // Create rules by account type:
      // - Admin can create anything
      // - National Head can create anything
      // - Reps can only create dealers/architects/contractors (not distributors)
      allow create: if isAuthenticated() && (
        isAdmin() ||
        isNationalHeadOrAdmin() ||
        (request.resource.data.type in ['dealer', 'architect', 'contractor'] &&
         request.resource.data.createdByUserId == request.auth.uid)
      );

      // Update rules:
      // - Admin can edit any account
      // - National Head can edit any account
      // - Reps can only edit dealers/architects/contractors they created
      allow update: if isAuthenticated() && (
        isAdmin() ||
        isNationalHeadOrAdmin() ||
        (resource.data.type in ['dealer', 'architect', 'contractor'] &&
         resource.data.createdByUserId == request.auth.uid)
      );

      // Delete rules:
      // - Admin can delete any account
      // - National Head can delete any account
      // - Reps can only delete dealers/architects/contractors they created
      allow delete: if isAuthenticated() && (
        isAdmin() ||
        isNationalHeadOrAdmin() ||
        (resource.data.type in ['dealer', 'architect', 'contractor'] &&
         resource.data.createdByUserId == request.auth.uid)
      );
    }

    // ========================================================================
    // VISITS COLLECTION
    // ========================================================================
    match /visits/{visitId} {
      // Reps can read their own visits
      // Managers can read all visits
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isManager()
      );

      // Reps can create visits for themselves only
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid;

      // Reps can update their own visits
      // Managers can update any visit
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isManager()
      );

      // Only admins can delete visits
      allow delete: if isAdmin();
    }

    // ========================================================================
    // ATTENDANCE COLLECTION
    // ========================================================================
    match /attendance/{attendanceId} {
      // Users can read their own attendance
      // Managers can read all attendance
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isManager()
      );

      // Users can create attendance records for themselves only
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid;

      // Only admins can update or delete attendance
      allow update, delete: if isAdmin();
    }

    // ========================================================================
    // LEADS COLLECTION
    // ========================================================================
    match /leads/{leadId} {
      // Reps can read leads assigned to them
      // Managers can read all leads
      allow read: if isAuthenticated() && (
        resource.data.ownerUserId == request.auth.uid || isManager()
      );

      // Only cloud functions/managers can create leads
      // (Webhook creates them, not mobile app directly)
      allow create: if isManager();

      // Reps can update their assigned leads (status, firstTouchAt, etc.)
      // Managers can update any lead
      allow update: if isAuthenticated() && (
        resource.data.ownerUserId == request.auth.uid || isManager()
      );

      // Only admins can delete leads
      allow delete: if isAdmin();
    }

    // ========================================================================
    // PINCODE ROUTES COLLECTION
    // ========================================================================
    match /pincodeRoutes/{pincode} {
      // Anyone authenticated can read pincode routes
      allow read: if isAuthenticated();

      // Only managers can create/update/delete routes
      allow create, update, delete: if isManager();
    }

    // ========================================================================
    // DSR REPORTS COLLECTION
    // ========================================================================
    match /dsrReports/{reportId} {
      // Reps can read their own reports (check reportId format: {userId}_{date})
      // Managers can read all reports
      allow read: if isAuthenticated() && (
        (resource == null || resource.data.userId == request.auth.uid) ||
        isManager()
      );

      // Cloud functions create DSR reports (not mobile app)
      // But allow creation if authenticated (function uses service account)
      allow create: if isAuthenticated();

      // Only managers can update DSR status (approve/reject)
      allow update: if isManager();

      // Only admins can delete reports
      allow delete: if isAdmin();
    }

    // ========================================================================
    // SHEETS SALES COLLECTION
    // ========================================================================
    match /sheetsSales/{saleId} {
      // Reps can read their own sales records
      // Managers can read all sales records
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isManager()
      );

      // Reps can create sales records for themselves only
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid;

      // Reps can update their own unverified sales
      // Managers can update any sale (for verification)
      allow update: if isAuthenticated() && (
        (resource.data.userId == request.auth.uid && resource.data.verified == false) ||
        isManager()
      );

      // Only admins can delete sales records
      allow delete: if isAdmin();
    }

    // ========================================================================
    // EXPENSES COLLECTION
    // ========================================================================
    match /expenses/{expenseId} {
      // Reps can read their own expenses
      // Managers can read all expenses
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isManager()
      );

      // Reps can create expenses for themselves only
      allow create: if isAuthenticated() &&
                      request.resource.data.userId == request.auth.uid;

      // Reps can update their own pending expenses
      // Managers can update any expense (for approval/rejection)
      allow update: if isAuthenticated() && (
        (resource.data.userId == request.auth.uid && resource.data.status == 'pending') ||
        isManager()
      );

      // Only admins can delete expenses
      allow delete: if isAdmin();
    }

    // ========================================================================
    // EVENTS COLLECTION (Outbox Pattern)
    // ========================================================================
    match /events/{eventId} {
      // Only cloud functions access events
      // Deny all client access
      allow read, write: if false;
    }
  }
}
